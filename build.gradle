import com.github.benmanes.gradle.versions.reporter.result.DependencyOutdated
import com.github.benmanes.gradle.versions.reporter.result.DependencyUnresolved
import com.github.benmanes.gradle.versions.reporter.result.Result

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy
    id 'groovy'

    id 'ru.vyarus.quality' version '4.6.0'
    id "maven-publish"
    id "com.github.ben-manes.versions" version "0.39.0"
    id 'net.researchgate.release' version '2.8.1'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.atlassian.oai', name: 'swagger-request-validator-core', version: '2.19.5'
    // Use the awesome Spock testing and specification framework
    testImplementation platform("org.spockframework:spock-bom:2.0-groovy-3.0")
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-junit4'
    testImplementation 'junit:junit:4.13.1'
}

def compatibilityVersion = 1.8
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion
group = 'com.github.openapi-validator-gradle-plugin'

gradlePlugin {
    // Define the plugin
    plugins {
        'openapi-validator-gradle-plugin' {
            id = 'com.github.openapi-validator-gradle-plugin'
            implementationClass = 'com.github.openapivalidatorgradleplugin.OpenapiValidatorGradlePluginPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
    functionalTest {
    }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle OpenAPI request/response validator plugin',
                'Implementation-Version': archiveVersion,
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Built-Gradle': gradle.gradleVersion
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    archiveClassifier.set('groovydoc')
    from groovydoc.destinationDir
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

artifacts {
    archives sourcesJar
    archives groovydocJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact groovydocJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('name', 'openapi-validator-gradle-plugin')
                root.appendNode('description', 'Gradle plugin that validates files with bodies of requests and responses against OpenAPI specification.')
                root.appendNode('inceptionYear', '2019')

                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'The Apache Software License, Version 2.0')
                license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                license.appendNode('distribution', 'repo')
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

build.dependsOn publishToMavenLocal

dependencyUpdates {
    boolean failOnUpdate = true
    List<String> ignoredUpdates = [
    ]
    onlyIf {
        project.version && (project.version as String).endsWith('-SNAPSHOT')
    }
    outputFormatter = { Result result ->
        Closure<Boolean> shouldIgnore = { String groupAndArtifact ->
            ignoredUpdates.any { groupAndArtifact ==~ it }
        }
        boolean hasUpdates = false
        result.outdated.dependencies.each { DependencyOutdated outdated ->
            if (!shouldIgnore("${outdated.group}:${outdated.name}")) {
                project.logger.warn(
                        "There is outdated dependency:" +
                                " ${outdated.group}:${outdated.name}:${outdated.version}" +
                                " -> ${outdated.available.release ?: outdated.available.milestone}")
                hasUpdates = true
            }
        }
        if (result.gradle.current.isUpdateAvailable && result.gradle.current > result.gradle.running) {
            if (!shouldIgnore("org.gradle:gradle")) {
                project.logger.warn(
                        "Gradle is outdated:" +
                                " ${result.gradle.running.version}" +
                                " -> ${result.gradle.current.version}")
                hasUpdates = true
            }
        }
        result.unresolved.dependencies.each { DependencyUnresolved unresolved ->
            project.logger.warn(
                    "Could not determine latest version for" +
                            " ${unresolved.group}:${unresolved.name}:${unresolved.version}" +
                            " because ${unresolved.reason}")
        }
        if (hasUpdates && failOnUpdate) {
            throw new GradleException("Dependencies have to be updated!")
        }
    }
    resolutionStrategy { ResolutionStrategy strategy ->
        strategy.componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                if (selection.candidate.version =~ /redhat/ || ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].
                        any { qualifier -> selection.candidate.version =~ /(?i)\b${qualifier}\d*\b/ }) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}
check.dependsOn dependencyUpdates

quality {
    consoleReporting = true
}
